Ejecutable como documento HTML5
    con autor allnulled
    con nombre index
    con versi√≥n 1
<head>
    <title>üåê Dialogs playground</title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="lib/win7/win7.scoped.2.css" />
    <link rel="stylesheet" type="text/css" href="lib/codemirror/codemirror.css" />
    <link rel="stylesheet" type="text/css" href="lib/ui-script/ui-script.css" />
    <link rel="stylesheet" type="text/css" href="lib/ui-script/components/xdialogport/xdialogport.css" />
    <script src="lib/codemirror/codemirror.js"></script>
    <script src="lib/calo/calo.js"></script>
    <script src="lib/castelog/castelog.js"></script>
    <script src="lib/ui-script/ui-script.js"></script>
    <script src="lib/ui-script/components/xdialogport/xdialogport.js"></script>
    <style>
      html {
        background-color: #111;
      }
      .CodeMirror {
        font-size: 10px;
        background-color: #222;
        color: white;
      }
      .CodeMirror-gutters {
        background-color: #222;
      }
      .CodeMirror-cursor {
        border-left: 1px solid white;
      }
    </style>
</head>
<body><div id="app"></div></body>.

### importo api nativa.

asigno window.PaginaDeInicio como un componente vue2 con nombre "PaginaDeInicio" con plantilla {
  <div class="PaginaDeInicio Component">
    <xtitle>Script de di√°logos</xtitle>
    <div>
      <textarea ref="dialogos_entrada" :value="dialogo_entrada_por_defecto"></textarea>
    </div>
    <div>
      <button style="width:100%;" v-on:click="execute">Ejecutar</button>
    </div>
    <div>
      <textarea ref="dialogos_salida"></textarea>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    m√©todo data donde {
      retorno {
        esta_usando_castelog: true,
        cm_dialogos_entrada: undefined,
        cm_dialogos_salida: undefined,
        dialogo_entrada_por_defecto: `hago this.clear_console().
creo es_hombre como ~ confirmar("¬øEres un hombre?").
si es_hombre hago ~ informar("As√≠ que eres un hombre...").
si no es_hombre hago ~ informar("As√≠ que eres una mujer...").
creo tiene_permiso_de_conducir como ~ confirmar("¬øY tienes permiso de conducir?").
hago this.print({ es_hombre, tiene_permiso_de_conducir }).`
      }.
    }.
    propiedad methods como {
      m√©todo clear_console donde {
        hago this.cm_dialogos_salida.setValue("").
      }.
      m√©todo print con (mensaje) donde {
        creo anterior como this.cm_dialogos_salida.getValue().
        creo siguiente como (anterior + "\n[*] " + (mensaje textualizado)).trim().
        hago this.cm_dialogos_salida.setValue(siguiente).
      }.
      m√©todo as√≠ncrono execute donde {
        creo entrada como this.cm_dialogos_entrada.getValue().
        creo variable entrada_js como entrada.
        si this.esta_usando_castelog {
          asigno entrada_js como Castelog_parser.parse(entrada).
        }.
        asigno entrada_js como "const confirmar = Vue.prototype.$dialogs.confirm;\n" + entrada_js.
        asigno entrada_js como "const informar = Vue.prototype.$dialogs.inform;\n" + entrada_js.
        asigno entrada_js como "const formulario = Vue.prototype.$dialogs.form;\n" + entrada_js.
        asigno entrada_js como "const limpiar_consola = this.clear_console;\n" + entrada_js.
        creo component como this.
        creo AsyncFunction como (una funci√≥n as√≠ncrona).constructor.
        creo js_final como una nueva AsyncFunction(entrada_js).
        creo resultado como as√≠ncronamente js_final.call(this).
        si resultado no es tipo indefinido {
          hago this.print(resultado).
        }.
      } en errores hago Vue.prototype.$dialogs.inform(error.name + ": " + error.message).
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    m√©todo beforeCreate donde {}.
    m√©todo created donde {}.
    m√©todo beforeMount donde {}.
    m√©todo mounted donde {
      asigno this.cm_dialogos_entrada como CodeMirror.fromTextArea(this.$refs.dialogos_entrada, { lineNumbers: true }).
      asigno this.cm_dialogos_salida como CodeMirror.fromTextArea(this.$refs.dialogos_salida, { lineNumbers: true }).
    }.
    m√©todo beforeUpdate donde {}.
    m√©todo updated donde {}.
    m√©todo beforeUnmount donde {}.
    m√©todo unmounted donde {}.
    m√©todo activated donde {}.
    m√©todo deactivated donde {}.
  }.
}.

asigno window.App como una aplicaci√≥n vue2 con nombre "App" con rutas [{
  propiedad path como "/".
  propiedad name como "PaginaDeInicio".
  propiedad component como PaginaDeInicio.
  propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app win7">
    <router-view :root="this"></router-view>
    <xdialogport></xdialogport>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con l√≥gica {
  retorno {
    m√©todo data donde {
      retorno {}.
    }.
    propiedad methods como {}.
    propiedad watch como {}.
    m√©todo beforeMount donde {
      asigno this.$window como window.
    }.
    m√©todo mounted donde {}.
  }.
} montada en "#app".